name: Lighthouse CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build worker.js
        run: npm run build

      - name: Wait for deployment (on push to master)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          echo "Waiting 30 seconds for Cloudflare Workers deployment..."
          sleep 30

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.13.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const manifestPath = '.lighthouseci/manifest.json';

            if (!fs.existsSync(manifestPath)) {
              console.log('No manifest found, skipping comment');
              return;
            }

            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
            const summary = manifest[0];

            const comment = `## Lighthouse CI Results ðŸ“Š

            **Performance**: ${summary.summary.performance * 100}
            **Accessibility**: ${summary.summary.accessibility * 100}
            **Best Practices**: ${summary.summary['best-practices'] * 100}
            **SEO**: ${summary.summary.seo * 100}

            [View full report](${summary.url})
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
