name: Deploy to Cloudflare Pages and Worker

on:
  push:
    branches:
      - master

jobs:
  deploy-worker:
    runs-on: ubuntu-latest
    name: Deploy Cloudflare Worker
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Wrangler
        run: npm install -g wrangler
      - name: Set Deployment Timestamp
        run: echo "DEPLOYED_AT=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: Generate Worker
        run: cd web && node generate-worker.js
        env:
          DEPLOYED_AT: ${{ env.DEPLOYED_AT }}
      - name: Publish Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: web

  generate-deployment-notes:
    runs-on: ubuntu-latest
    name: Generate Deployment Notes
    needs: deploy-worker
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get latest commit message
        id: get_commit_message
        run: |
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          git log -1 --pretty=%B >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate summary with Gemini
        id: gemini_summary
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Use jq to safely construct JSON payload with proper escaping
          COMMIT_MSG='${{ steps.get_commit_message.outputs.commit_message }}'
          JSON_PAYLOAD=$(jq -n \
            --arg msg "Please summarize the following commit message for a deployment log, focusing on the key changes. Keep it concise (1-2 sentences): \n\n${COMMIT_MSG}" \
            '{"contents":[{"parts":[{"text":$msg}]}]}')

          API_RESPONSE=$(curl -s -H 'Content-Type: application/json' \
            -d "$JSON_PAYLOAD" \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}")

          echo "API Response: $API_RESPONSE"

          if echo "$API_RESPONSE" | jq -e '.candidates[0].content.parts[0].text' > /dev/null; then
            GENERATED_TEXT=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          else
            GENERATED_TEXT="Could not generate summary. API response did not contain valid text."
            echo "Error: Invalid API response."
          fi

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$GENERATED_TEXT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Print deployment summary
        run: |
          echo "🚀 Deployment Summary"
          echo "---------------------"
          echo "${{ steps.gemini_summary.outputs.summary }}"

  notify-slack:
    runs-on: ubuntu-latest
    name: Notify Slack
    needs: [deploy-worker, generate-deployment-notes]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get commit info
        id: commit_info
        run: |
          echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          git log -1 --pretty=%B >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.deploy-worker.result }}" == "success" ]; then
            echo "status=✅ Success" >> $GITHUB_OUTPUT
            echo "color=#36a64f" >> $GITHUB_OUTPUT
          else
            echo "status=❌ Failed" >> $GITHUB_OUTPUT
            echo "color=#ff0000" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: vars.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          DEPLOYMENT_URL="https://resume.jclee.me"
          GITHUB_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.commit_info.outputs.commit_sha }}"

          # Create Slack message payload
          cat << EOF > slack_payload.json
          {
            "text": "Resume Portfolio Deployment",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🚀 Resume Portfolio Deployment"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\n${{ steps.status.outputs.status }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:*\n\`${{ github.ref_name }}\`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit:*\n<${GITHUB_URL}|\`${{ steps.commit_info.outputs.commit_sha }}\`>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Author:*\n${{ steps.commit_info.outputs.commit_author }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Commit Message:*\n\`\`\`${{ steps.commit_info.outputs.commit_message }}\`\`\`"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Live Site"
                    },
                    "url": "${DEPLOYMENT_URL}",
                    "style": "primary"
                  },
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Workflow"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
          EOF

          # Send to Slack
          curl -X POST -H 'Content-type: application/json' \
            --data @slack_payload.json \
            "${SLACK_WEBHOOK_URL}"

          echo "✅ Slack notification sent"